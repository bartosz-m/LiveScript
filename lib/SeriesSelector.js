// Generated by LiveScript 1.5.0
var check, SeriesSelector;
check = require('./check');
SeriesSelector = (function(){
  SeriesSelector.displayName = 'SeriesSelector';
  var prototype = SeriesSelector.prototype, constructor = SeriesSelector;
  module.exports = SeriesSelector;
  function SeriesSelector(){
    this.selectors = [];
    this.captures = {};
  }
  SeriesSelector.prototype.append = function(selector){
    this.selectors.push(selector);
    return selector;
  };
  SeriesSelector.prototype.capture = function(node, matched){
    var c, ref$, fn, own$ = {}.hasOwnProperty;
    matched == null && (matched = {});
    for (c in ref$ = this.captures) if (own$.call(ref$, c)) {
      fn = ref$[c];
      matched[c] = fn(node);
    }
    return matched;
  };
  SeriesSelector.prototype._match = function(node, matched){
    var x$, nodeIterator, i$, ref$, len$, selector, ref1$, nextNode, done, result;
    x$ = check;
    x$.isDefined(node, 'node');
    x$.hasIterator(node);
    nodeIterator = node[Symbol.iterator]();
    for (i$ = 0, len$ = (ref$ = this.selectors).length; i$ < len$; ++i$) {
      selector = ref$[i$];
      ref1$ = nodeIterator.next(), nextNode = ref1$.value, done = ref1$.done;
      if (done) {
        return null;
      }
      check.isDefined(nextNode, 'next-node');
      if (!(result = selector._match(nextNode, matched))) {
        return null;
      }
    }
    this.capture(node, matched);
    return matched;
  };
  SeriesSelector.prototype.match = function(node){
    check.isDefined(node, 'node');
    return this._match(node, {});
  };
  return SeriesSelector;
}());