// Generated by LiveScript 1.5.0
var check, AbstractSelector;
check = require('./check');
AbstractSelector = (function(){
  AbstractSelector.displayName = 'AbstractSelector';
  var prototype = AbstractSelector.prototype, constructor = AbstractSelector;
  module.exports = AbstractSelector;
  function AbstractSelector(){
    this.captures = {};
  }
  AbstractSelector.prototype.capture = function(node, matched){
    var c, ref$, fn, own$ = {}.hasOwnProperty;
    matched == null && (matched = {});
    if (this.captures != null) {
      for (c in ref$ = this.captures) if (own$.call(ref$, c)) {
        fn = ref$[c];
        matched[c] = fn(node);
      }
    }
    return matched;
  };
  AbstractSelector.prototype._match = function(node, matched){
    throw Error(constructor.name + " nie ma metody _match");
  };
  AbstractSelector.prototype.match = function(node){
    var result;
    check.isDefined(node, 'Node');
    result = this._match(node, {});
    if (result != null) {
      this.capture(node, result);
    }
    return result;
  };
  return AbstractSelector;
}());