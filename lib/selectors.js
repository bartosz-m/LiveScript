// Generated by LiveScript 1.5.0
var PropertySelector, TypeSelector, SeriesSelector, AndSelector, AnySelector, flatWrapArray, seriesSelector, propertySelector, nodeSelector, toString$ = {}.toString, out$ = typeof exports != 'undefined' && exports || this;
PropertySelector = require('./PropertySelector');
TypeSelector = require('./TypeSelector');
SeriesSelector = require('./SeriesSelector');
AndSelector = require('./AndSelector');
AnySelector = require('./AnySelector');
flatWrapArray = function(it){
  if ('Array' !== toString$.call(it).slice(8, -1)) {
    return [it];
  } else {
    return it;
  }
};
out$.seriesSelector = seriesSelector = function(series){
  var x$, i$, len$, s;
  x$ = new SeriesSelector;
  for (i$ = 0, len$ = series.length; i$ < len$; ++i$) {
    s = series[i$];
    x$.append(s);
  }
  return x$;
};
out$.propertySelector = propertySelector = function(name, inner){
  var x$;
  x$ = new PropertySelector(name);
  if (typeof inner === 'Object') {
    x$.inner = inner;
  }
  return x$;
};
out$.nodeSelector = nodeSelector = function(arg$){
  var type, capture, properties, series, options, plugins, selectors, k, v, plugin, newSelectors, result, s, own$ = {}.hasOwnProperty;
  type = arg$.type, capture = arg$.capture, properties = arg$.properties, series = arg$.series;
  options = arguments[0];
  plugins = {
    type: function(it){
      return new TypeSelector(it);
    },
    properties: function(props){
      var k, v, x$, results$ = [];
      for (k in props) {
        v = props[k];
        x$ = propertySelector(k);
        if (v != null) {
          x$.inner = nodeSelector(v);
        }
        results$.push(x$);
      }
      return results$;
    },
    capture: function(){
      return [];
    },
    series: function(series){
      var x$, i$, len$, s;
      x$ = new SeriesSelector;
      for (i$ = 0, len$ = series.length; i$ < len$; ++i$) {
        s = series[i$];
        x$.append(nodeSelector(s));
      }
      return x$;
    }
  };
  selectors = [];
  for (k in options) if (own$.call(options, k)) {
    v = options[k];
    if ((plugin = plugins[k]) == null) {
      throw Error("missing plugin for " + k);
    }
    newSelectors = flatWrapArray(plugin(v));
    selectors.push.apply(selectors, newSelectors);
  }
  result = (function(){
    var x$, i$, ref$, len$;
    switch (false) {
    case selectors.length !== 0:
      return new AnySelector;
    case selectors.length !== 1:
      return selectors[0];
    default:
      x$ = new AndSelector;
      for (i$ = 0, len$ = (ref$ = selectors).length; i$ < len$; ++i$) {
        s = ref$[i$];
        x$.append(s);
      }
      return x$;
    }
  }());
  if (capture) {
    import$(result.captures, capture);
  }
  return result;
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}