// Generated by LiveScript 1.5.0
var check, SeriesSelector, AbstractSelector, isA, TypeSelector;
check = require('./check');
SeriesSelector = require('./SeriesSelector');
AbstractSelector = require('./AbstractSelector');
isA = function(constructorName, object){
  check.isDefined(object);
  return object.constructor.name === constructorName;
};
TypeSelector = (function(superclass){
  var prototype = extend$((import$(TypeSelector, superclass).displayName = 'TypeSelector', TypeSelector), superclass).prototype, constructor = TypeSelector;
  module.exports = TypeSelector;
  function TypeSelector(type){
    this.type = type;
    TypeSelector.superclass.call(this);
    this.inner = [];
  }
  TypeSelector.prototype._match = function(node, matched){
    check.isDefined(node, 'Node');
    if (isA(this.type, node)) {
      this.capture(node, matched);
      return matched;
    } else {
      return null;
    }
  };
  return TypeSelector;
}(AbstractSelector));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}