// Generated by LiveScript 1.5.0
var check, AbstractSelector, AnySelector;
check = require('./check');
AbstractSelector = require('./AbstractSelector');
AnySelector = (function(superclass){
  var prototype = extend$((import$(AnySelector, superclass).displayName = 'AnySelector', AnySelector), superclass).prototype, constructor = AnySelector;
  module.exports = AnySelector;
  function AnySelector(){
    AnySelector.superclass.call(this);
  }
  AnySelector.prototype._match = function(node, matched){
    check.isDefined(node, 'Node');
    this.capture(node, matched);
    return matched;
  };
  return AnySelector;
}(AbstractSelector));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}