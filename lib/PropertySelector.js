// Generated by LiveScript 1.5.0
var check, AnySelector, AbstractSelector, isOk, PropertySelector, toString$ = {}.toString;
check = require('./check');
AnySelector = require('./AnySelector');
AbstractSelector = require('./AbstractSelector');
isOk = function(){
  return true;
};
PropertySelector = (function(superclass){
  var prototype = extend$((import$(PropertySelector, superclass).displayName = 'PropertySelector', PropertySelector), superclass).prototype, constructor = PropertySelector;
  module.exports = PropertySelector;
  function PropertySelector(property, propertyTester){
    this.property = property;
    this.propertyTester = propertyTester != null ? propertyTester : isOk;
    PropertySelector.superclass.call(this);
    this.inner = new AnySelector;
    if ('Function' !== toString$.call(this.propertyTester).slice(8, -1)) {
      this.propertyTester = (function(expectedValue){
        return function(it){
          return it === expectedValue;
        };
      }.call(this, this.propertyTester));
    }
  }
  PropertySelector.prototype._match = function(node, matched){
    var property;
    check.isDefined(node, 'node');
    if ((property = node[this.property]) != null && this.propertyTester(property) && this.inner._match(node[this.property], matched)) {
      this.capture(node, matched);
      return matched;
    } else {
      return null;
    }
  };
  return PropertySelector;
}(AbstractSelector));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}