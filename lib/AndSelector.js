// Generated by LiveScript 1.5.0
var check, AbstractSelector, AndSelector;
check = require('./check');
AbstractSelector = require('./AbstractSelector');
AndSelector = (function(superclass){
  var prototype = extend$((import$(AndSelector, superclass).displayName = 'AndSelector', AndSelector), superclass).prototype, constructor = AndSelector;
  module.exports = AndSelector;
  function AndSelector(){
    AndSelector.superclass.call(this);
    this.selectors = [];
  }
  AndSelector.prototype.append = function(selector){
    this.selectors.push(selector);
    return selector;
  };
  AndSelector.prototype._match = function(node, matched){
    var i$, ref$, len$, selector, result;
    check.isDefined(node, 'Node');
    for (i$ = 0, len$ = (ref$ = this.selectors).length; i$ < len$; ++i$) {
      selector = ref$[i$];
      if (!(result = selector._match(node, matched))) {
        return null;
      }
    }
    this.capture(node, matched);
    return matched;
  };
  return AndSelector;
}(AbstractSelector));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}